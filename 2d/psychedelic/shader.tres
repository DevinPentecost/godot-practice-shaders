[gd_resource type="VisualShader" load_steps=10 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=3]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=4]
default_input_values = [ 0, 0.0, 1, 0.75, 2, 0.75 ]

[sub_resource type="VisualShaderNodeVectorDecompose" id=5]

[sub_resource type="VisualShaderNodeScalarOp" id=6]

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=1]
output_port_for_preview = 0
uniform_name = "noise"

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorFunc" id=8]
function = 5

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "time"

[resource]
code = "shader_type canvas_item;
uniform sampler2D noise;



void vertex() {
// Output:0

}

void fragment() {
// Input:9
	float n_out9p0 = TIME;

// ScalarOp:10
	float n_in10p1 = 0.50000;
	float n_out10p0 = n_out9p0 * n_in10p1;

// Input:6
	vec3 n_out6p0 = vec3(UV, 0.0);

// TextureUniform:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 n_tex_read = texture(noise, n_out6p0.xy);
		n_out5p0 = n_tex_read.rgb;
		n_out5p1 = n_tex_read.a;
	}

// VectorDecompose:15
	float n_out15p0 = n_out5p0.x;
	float n_out15p1 = n_out5p0.y;
	float n_out15p2 = n_out5p0.z;

// ScalarOp:17
	float n_in17p1 = 0.50000;
	float n_out17p0 = n_out15p0 - n_in17p1;

// ScalarOp:16
	float n_out16p0 = n_out10p0 + n_out17p0;

// VectorCompose:12
	float n_in12p1 = 0.75000;
	float n_in12p2 = 0.75000;
	vec3 n_out12p0 = vec3(n_out16p0, n_in12p1, n_in12p2);

// VectorFunc:8
	vec3 n_out8p0;
	{
		vec3 c = n_out12p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out8p0 = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// Output:0
	COLOR.rgb = n_out8p0;

}

void light() {
// Output:0

}
"
custom_defines = ""
graph_offset = Vector2( -386.083, -339.25 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1200, -60 )
nodes/fragment/5/node = SubResource( 1 )
nodes/fragment/5/position = Vector2( -260, -120 )
nodes/fragment/6/node = SubResource( 2 )
nodes/fragment/6/position = Vector2( -420, -100 )
nodes/fragment/8/node = SubResource( 8 )
nodes/fragment/8/position = Vector2( 960, -60 )
nodes/fragment/9/node = SubResource( 9 )
nodes/fragment/9/position = Vector2( -240, -280 )
nodes/fragment/10/node = SubResource( 3 )
nodes/fragment/10/position = Vector2( 60, -300 )
nodes/fragment/12/node = SubResource( 4 )
nodes/fragment/12/position = Vector2( 480, -300 )
nodes/fragment/15/node = SubResource( 5 )
nodes/fragment/15/position = Vector2( -80, -40 )
nodes/fragment/16/node = SubResource( 6 )
nodes/fragment/16/position = Vector2( 300, -140 )
nodes/fragment/17/node = SubResource( 7 )
nodes/fragment/17/position = Vector2( 120, -60 )
nodes/fragment/connections = PoolIntArray( 6, 0, 5, 0, 8, 0, 0, 0, 9, 0, 10, 0, 5, 0, 15, 0, 10, 0, 16, 0, 16, 0, 12, 0, 12, 0, 8, 0, 15, 0, 17, 0, 17, 0, 16, 1 )
